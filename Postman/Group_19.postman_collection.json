{
	"info": {
		"_postman_id": "ae5b86de-5061-49b8-b49d-3395f416dd51",
		"name": "Group_19",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "New Folder",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://www.nbrb.by/api/exrates/currencies\", function (err, response) {console.log(response.json()); });\r",
									"let r = JSON.parse(responseBody);\r",
									" let t = r[23].Cur_ID\r",
									"pm.environment.set(\"Cur_ID_1\", r[23].Cur_ID); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// https://www.nbrb.by/api/exrates/currencies"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.nbrb.by/api/exrates/currencies",
							"protocol": "https",
							"host": [
								"www",
								"nbrb",
								"by"
							],
							"path": [
								"api",
								"exrates",
								"currencies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let r = JSON.parse(responseBody);\r",
									" let t = r[23].Cur_ID\r",
									"pm.environment.set(\"Cur_ID_1\", r[23].Cur_ID);\r",
									"   pm.sendRequest(\"https://www.nbrb.by/api/exrates/rates/{{Cur_ID_1}}\", function (err, response) {\r",
									"    //    console.log(response.json());\r",
									"   // });\r",
									"//console.log(t)\r",
									"//}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.nbrb.by/api/exrates/currencies",
							"protocol": "https",
							"host": [
								"www",
								"nbrb",
								"by"
							],
							"path": [
								"api",
								"exrates",
								"currencies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login on server",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Take token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set('auth_token', jsonData.token);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}login?login=jndef9&password=qwerty1",
					"host": [
						"{{url}}login"
					],
					"query": [
						{
							"key": "login",
							"value": "jndef9"
						},
						{
							"key": "password",
							"value": "qwerty1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add user info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							" pm.test('Get token', function() {var jsondata = pm.response.json()\r",
							"pm.environment.get(\"token\")})\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"var schema = {\"type\": \"object\", \r",
							"\"person\" : {\"type\": \"object\",\r",
							"      \"properties\": {\"u_age\": {\"type\": \"integer\"},\"additionalProperties\":false,\r",
							"        \"u_name\": {\"type\": \"array\", \"items\": [{\"type\": \"string\"}, {\"type\": \"integer\"}, {\"type\": \"integer\"}], \"required\": [\"u_name\"], \"additionalProperties\":false,\r",
							"        \"u_salary_1_5_year\": {\"type\":\"integer\"}},\r",
							"      \"required\": [\"u_name\", \"u_age\", \"u_salary_1_5_year\"], \"additionalProperties\":false,\r",
							"    \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"    \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"    \"start_qa_salary\": {\"type\": \"integer\"},\r",
							"  \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"], \"additionalProperties\":false\r",
							"}}}\r",
							"pm.test(\"Validate schema\", function () { pm.expect(tv4.validate(jsondata, schema)).to.be.true});\r",
							"\r",
							"let s = JSON.parse(responseBody);\r",
							"\r",
							"//pm.environment.set(\"salary\", s.start_qa_salary);\r",
							"pm.environment.set(\"u_salary_1_5_year\", s.person.u_salary_1_5_year);\r",
							"pm.environment.set(\"name\", s.person.u_name[0]);\r",
							"let s6m = s.start_qa_salary  * 2;\r",
							"let s12m = s.start_qa_salary * 2.9;\r",
							"let s18m = s.start_qa_salary * 4;\r",
							"\r",
							" pm.test(\"Check value\", function () {\r",
							"    var s = pm.response.json();\r",
							"    pm.expect(s6m).to.eql(s.qa_salary_after_6_months);\r",
							"    pm.expect(s12m).to.eql(s.qa_salary_after_12_months);\r",
							"   pm.expect(s18m).to.eql(pm.environment.get(\"u_salary_1_5_year\", s.u_salary_1_5_year));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "auth_token",
						"value": "{{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 22,\r\n  \"salary\": 200,\r\n    \"name\":\"Tennard\",\r\n    \"auth_token\":\"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info?token={{token}}",
					"host": [
						"{{url}}user_info"
					],
					"query": [
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Get token', function() {var jsondata = pm.response.json()\r",
							"pm.environment.get(\"{{auth_token}}\")})\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsondata = pm.response.json();\r",
							"var schema = { \"type\":\"object\",\r",
							"    \"person\" : {\"type\": \"object\",\r",
							"    \"properties\" : {\"age\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\r",
							"         \"salary\": {\"type\":\"array\", \"items\":{\"type\":\"integer\"}, \"type\" :\"string\", \"type\":\"string\"}}, \"required\" :[\"salary\"],\r",
							"          \r",
							"  }, \"required\":[\"age\", \"name\", \"salary\"], \"additionalProreties\":false} //pm.test (\"Validate schema\", () => {pm.response.to.have.jsonSchema(schema);})\r",
							"pm.test(\"Validate schema\", () => { pm.response.to.have.jsonSchema(schema); \r",
							"});\r",
							"\r",
							"let salary_b = JSON.parse(responseBody);\r",
							"\r",
							"pm.environment.set(\"salary\", salary_b.salary[0]);   \r",
							"      let salary_2 = salary_b.salary[0] * 2;\r",
							"      let salary_3 = salary_b.salary[0] * 3; \r",
							"        pm.test(\"Check value\", function () {\r",
							"            let salary_b = pm.response.json();\r",
							"            pm.expect(parseInt(salary_b.salary[1])).to.eql(salary_2);\r",
							"        });\r",
							"pm.test(\"Check value\", function () {\r",
							"            let salary_b = pm.response.json();\r",
							"            pm.expect(parseInt(salary_b.salary[2])).to.eql(salary_3);\r",
							"        });\r",
							"pm.test(\"Check difference\", function () {\r",
							"    pm.expect(salary_b.salary[2]) > (salary_b.salary[1]) && (salary_b.salary[0]) ;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					],
					"query": [
						{
							"key": "token",
							"value": "{{token}}",
							"disabled": true
						},
						{
							"key": "password",
							"value": "qwerty1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Get token', function() {var jsondata = pm.response.json()\r",
							"pm.environment.get(\"token\")})\r",
							"\r",
							"let jsondata = pm.response.json();\r",
							"let schema = {\"type\":\"object\",\r",
							"\"person\" : {\"type\":\"object\", \"properties\":{\"age\": {\"type\" : \"integer\"}, \"daily_food\":{\"type\":\"integer\"}, \"daily_sleep\":{\"type\":\"integer\"}, \"name\":{\"type\":\"string\"} }, \"required\":[\"age\", \"daily_food\", \"daily_sleep\", \"name\"], \"additionalProperties\":false},}\r",
							"pm.test (\"Check Schema\", function (){pm.response.to.have.jsonSchema(schema)})\r",
							"\r",
							"\r",
							"\r",
							"pm.test (\"Status code 200\", function () {pm.response.to.have.status(200);})\r",
							"let s = request.data;\r",
							"let w = s.weight;\r",
							"console.log(w);\r",
							"let k = JSON.parse(responseBody);\r",
							"let DF = k.daily_food;\r",
							"let DS = k.daily_sleep;\r",
							"//let s = JSON.parse(da);\r",
							"//let uu = JSON.parse(requestBody);\r",
							"pm.test (\"Check value\", function () {\r",
							"    let s = pm.request.data;\r",
							"   pm.expect(DF).to.eql(w * 0.012);\r",
							"   pm.expect(DS).to.eql(w * 2.5);\r",
							"    })\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "50",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Get token', function() {var jsondata = pm.response.json()\r",
							"pm.environment.get(\"token\")});\r",
							"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200)});\r",
							"\r",
							"let jsondata =pm.response.json();\r",
							"let schema = {\"type\":\"object\", \"person\":{\"type\":\"object\", \"properies\":{\"age\":{\"type\":\"integer\"}, \"family\":{\"type\":\"object\", \"properies\":{\"children\":{\"type\":\"array\", \"items\" :{\"type\":\"string\", \"type\":\"integer\"}}}, \"u_salary_1_5_year\":{\"type\":\"integer\"}}}, \"name\":{\"type\":\"string\"}, \"salary\":{\"type\":\"integer\"}, \"required\":[\"age\",\"salary\",\"name\"], \"additionalProperties\":false}}\r",
							"pm.test(\"Check schema\", function(){pm.response.to.have.jsonSchema(schema)})\r",
							"\r",
							"\r",
							"\r",
							"let Chname = JSON.parse(responseBody);\r",
							"let Chname_c = Chname.name;\r",
							"pm.test (\"Check name\", function(){pm.expect(Chname_c).to.eql(pm.environment.get(\"name\"))});\r",
							"let ageReq = request.data;\r",
							"let ageReq_0 = ageReq.age;\r",
							"\r",
							"let ageRes = JSON.parse(responseBody);\r",
							"let ageRes_0 = ageRes.age;\r",
							"console.log(ageReq_0);\r",
							"pm.test (\"Check value AGE\", function(){pm.expect(ageReq_0).to.eql(ageRes_0)})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "3",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "139",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tennard",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('Get token', function (){var JsonData = pm.response.json()\r",
							"pm.environment.get('token')})\r",
							"pm.test(\"Check status code\", function(){pm.response.to.have.status(200)});\r",
							"let zz = JSON.parse(responseBody);\r",
							"let tt = zz[Math.floor(Math.random() * zz.length)];\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", tt.Cur_ID);\r",
							"console.log(tt);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test ('Get token', function (){var JsonData = pm.response.json()})\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"let JsonData = pm.response.json();\r",
							"let schema = {\r",
							"    \"type\":\"array\", \"items\":{\r",
							"    \"Cur_Abbreviation\":{\"type\":\"string\"},\r",
							"    \"Cur_ID\": {\"type\":\"integer\"},\r",
							"    \"Cur_Name\" :{\"type\":\"string\"}}, \"required\":[\"Cur_Abbreviation\",\"Cur_ID\",\"Cur_Name\"]}\r",
							"    pm.test(\"Check schema\", function(){pm.response.to.have.jsonSchema(schema)})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{auth_token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "Cur_ID",
							"value": "{{Cur_ID}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://116.203.27.46:5002/"
		}
	]
}